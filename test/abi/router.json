{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "CachedSwapSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "ReceiveFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bridgeFunctionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "Revert",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TYPE_REDEEM_LOCAL_CALLBACK_RETRY",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TYPE_REDEEM_LOCAL_RESPONSE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TYPE_SWAP_REMOTE_RETRY",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        }
      ],
      "name": "activateChainPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract Bridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cachedSwapLookup",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_fullMode",
          "type": "bool"
        }
      ],
      "name": "callDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "clearCachedSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "createChainPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_sharedDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_localDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.CreditObj",
          "name": "_c",
          "type": "tuple"
        }
      ],
      "name": "creditChainPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_functionType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_transferAndCallPayload",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "quoteLayerZeroFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountLP",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "redeemLocal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmountSD",
          "type": "uint256"
        }
      ],
      "name": "redeemLocalCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        }
      ],
      "name": "redeemLocalCheckOnRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "redeemRemote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "retryRevert",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "revertRedeemLocal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "revertLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        }
      ],
      "name": "sendCredits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Bridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "contract Factory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setBridgeAndFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_batched",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_swapDeltaBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpDeltaBP",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_defaultSwapMode",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_defaultLPMode",
          "type": "bool"
        }
      ],
      "name": "setDeltaParam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeLibraryAddr",
          "type": "address"
        }
      ],
      "name": "setFeeLibrary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintFeeBP",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setMintFeeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_swapStop",
          "type": "bool"
        }
      ],
      "name": "setSwapStop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_weight",
          "type": "uint16"
        }
      ],
      "name": "setWeightForChainPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountLD",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstGasForCall",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkbRemove",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.SwapObj",
          "name": "_s",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "swapRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6db68c2df4a2a73ff4fc18df891e4c9631a832ccf8866f97d86e944420a87b70",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "4268712",
    "logsBloom": "0x
    "blockHash": "0xab8edf8691faf6ee82bd6b3e836fb6fbfabc907a92831a73eec3fd05b1c8fec3",
    "transactionHash": "0x6db68c2df4a2a73ff4fc18df891e4c9631a832ccf8866f97d86e944420a87b70",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x6db68c2df4a2a73ff4fc18df891e4c9631a832ccf8866f97d86e944420a87b70",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xab8edf8691faf6ee82bd6b3e836fb6fbfabc907a92831a73eec3fd05b1c8fec3"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "4268712",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "93695e8f8ff858f44ba540ebbfec827c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"CachedSwapSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ReceiveFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bridgeFunctionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Revert\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TYPE_REDEEM_LOCAL_CALLBACK_RETRY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_REDEEM_LOCAL_RESPONSE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_SWAP_REMOTE_RETRY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"}],\"name\":\"activateChainPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract Bridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedSwapLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fullMode\",\"type\":\"bool\"}],\"name\":\"callDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"clearCachedSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"createChainPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_sharedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_localDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.CreditObj\",\"name\":\"_c\",\"type\":\"tuple\"}],\"name\":\"creditChainPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_transferAndCallPayload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"quoteLayerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLP\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"redeemLocal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmountSD\",\"type\":\"uint256\"}],\"name\":\"redeemLocalCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"}],\"name\":\"redeemLocalCheckOnRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"redeemRemote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"retryRevert\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"revertRedeemLocal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revertLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"sendCredits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Bridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract Factory\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setBridgeAndFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_batched\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapDeltaBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpDeltaBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_defaultSwapMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_defaultLPMode\",\"type\":\"bool\"}],\"name\":\"setDeltaParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeLibraryAddr\",\"type\":\"address\"}],\"name\":\"setFeeLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintFeeBP\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setMintFeeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setProtocolFeeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapStop\",\"type\":\"bool\"}],\"name\":\"setSwapStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_weight\",\"type\":\"uint16\"}],\"name\":\"setWeightForChainPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountLD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkbRemove\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.SwapObj\",\"name\":\"_s\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"swapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./Router.sol\\\";\\n// interfaces\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract Bridge is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    uint8 public constant TYPE_SWAP_REMOTE = 1;\\n    uint8 public constant TYPE_ADD_LIQUIDITY = 2;\\n    uint8 public constant TYPE_REDEEM_LOCAL_CALL_BACK = 3;\\n    uint8 public constant TYPE_WITHDRAW_REMOTE = 4;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    ILayerZeroEndpoint public layerZeroEndpoint;\\n    mapping(uint16 => bytes) public bridgeLookup;\\n    mapping(uint16 => mapping(uint8 => uint256)) public gasLookup;\\n    Router public router;\\n    bool public useLayerZeroToken;\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == address(router), \\\"Stargate: caller must be Router.\\\");\\n        _;\\n    }\\n\\n    constructor(address _layerZeroEndpoint) {\\n        require(_layerZeroEndpoint != address(0x0), \\\"Stargate: _layerZeroEndpoint cannot be 0x0\\\");\\n        layerZeroEndpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // EXTERNAL functions\\n\\n    function setRouter(Router _router) external onlyOwner {\\n        require(address(router) == address(0x0), \\\"router already initialized\\\"); // 1 time only\\n        router = _router;\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) external override {\\n        require(msg.sender == address(layerZeroEndpoint), \\\"Stargate: only LayerZero endpoint can call lzReceive\\\");\\n        require(\\n            _srcAddress.length == bridgeLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(bridgeLookup[_srcChainId]),\\n            \\\"Stargate: bridge does not match\\\"\\n        );\\n\\n        uint8 functionType;\\n        assembly {\\n            functionType := mload(add(_payload, 32))\\n        }\\n\\n        if (functionType == TYPE_SWAP_REMOTE) {\\n            (\\n                ,\\n                uint256 srcPoolId,\\n                uint256 dstPoolId,\\n                uint256 dstGasForCall,\\n                Pool.CreditObj memory c,\\n                Pool.SwapObj memory s,\\n                bytes memory to,\\n                bytes memory payload\\n            ) = abi.decode(_payload, (uint8, uint256, uint256, uint256, Pool.CreditObj, Pool.SwapObj, bytes, bytes));\\n            address toAddress;\\n            assembly {\\n                toAddress := mload(add(to, 20))\\n            }\\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\\n            router.swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, toAddress, s, payload);\\n        } else if (functionType == TYPE_ADD_LIQUIDITY) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c) = abi.decode(_payload, (uint8, uint256, uint256, Pool.CreditObj));\\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\\n        } else if (functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c, uint256 amountSD, uint256 mintAmountSD, bytes memory to) = abi\\n                .decode(_payload, (uint8, uint256, uint256, Pool.CreditObj, uint256, uint256, bytes));\\n            address toAddress;\\n            assembly {\\n                toAddress := mload(add(to, 20))\\n            }\\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\\n            router.redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, toAddress, amountSD, mintAmountSD);\\n        } else if (functionType == TYPE_WITHDRAW_REMOTE) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c, uint256 amountSD, bytes memory to) = abi.decode(\\n                _payload,\\n                (uint8, uint256, uint256, Pool.CreditObj, uint256, bytes)\\n            );\\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\\n            router.redeemLocalCheckOnRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, amountSD, to);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n\\n    function swap(\\n        uint16 _chainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        Pool.CreditObj memory _c,\\n        Pool.SwapObj memory _s,\\n        Router.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable onlyRouter {\\n        bytes memory payload = abi.encode(TYPE_SWAP_REMOTE, _srcPoolId, _dstPoolId, _lzTxParams.dstGasForCall, _c, _s, _to, _payload);\\n        _call(_chainId, TYPE_SWAP_REMOTE, _refundAddress, _lzTxParams, payload);\\n    }\\n\\n    function redeemLocalCallback(\\n        uint16 _chainId,\\n        address payable _refundAddress,\\n        Pool.CreditObj memory _c,\\n        Router.lzTxObj memory _lzTxParams,\\n        bytes memory _payload\\n    ) external payable onlyRouter {\\n        bytes memory payload;\\n\\n        {\\n            (, uint256 srcPoolId, uint256 dstPoolId, uint256 amountSD, uint256 mintAmountSD, bytes memory to) = abi.decode(\\n                _payload,\\n                (uint8, uint256, uint256, uint256, uint256, bytes)\\n            );\\n\\n            // swap dst and src because we are headed back\\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, dstPoolId, srcPoolId, _c, amountSD, mintAmountSD, to);\\n        }\\n\\n        _call(_chainId, TYPE_REDEEM_LOCAL_CALL_BACK, _refundAddress, _lzTxParams, payload);\\n    }\\n\\n    function redeemLocal(\\n        uint16 _chainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        Pool.CreditObj memory _c,\\n        uint256 _amountSD,\\n        bytes calldata _to,\\n        Router.lzTxObj memory _lzTxParams\\n    ) external payable onlyRouter {\\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_REMOTE, _srcPoolId, _dstPoolId, _c, _amountSD, _to);\\n        _call(_chainId, TYPE_WITHDRAW_REMOTE, _refundAddress, _lzTxParams, payload);\\n    }\\n\\n    function sendCredits(\\n        uint16 _chainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        Pool.CreditObj memory _c\\n    ) external payable onlyRouter {\\n        bytes memory payload = abi.encode(TYPE_ADD_LIQUIDITY, _srcPoolId, _dstPoolId, _c);\\n        Router.lzTxObj memory lzTxObj = Router.lzTxObj(0, 0, \\\"0x\\\");\\n        _call(_chainId, TYPE_ADD_LIQUIDITY, _refundAddress, lzTxObj, payload);\\n    }\\n\\n    function quoteLayerZeroFee(\\n        uint16 _chainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        Router.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256) {\\n        bytes memory payload = \\\"\\\";\\n        if (_functionType == TYPE_SWAP_REMOTE) {\\n            Pool.SwapObj memory s = Pool.SwapObj(1, 1, 1, 1, 1, 1);\\n            payload = abi.encode(TYPE_SWAP_REMOTE, 0, 0, 0, s, _toAddress, _transferAndCallPayload);\\n        } else if (_functionType == TYPE_ADD_LIQUIDITY) {\\n            payload = abi.encode(TYPE_ADD_LIQUIDITY, 0, 0);\\n        } else if (_functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, 0, 0, 0, 0, _toAddress);\\n        } else if (_functionType == TYPE_WITHDRAW_REMOTE) {\\n            payload = abi.encode(TYPE_WITHDRAW_REMOTE, 0, 0, 0, _toAddress);\\n        }\\n\\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _functionType, _lzTxParams);\\n        return layerZeroEndpoint.estimateNativeFees(_chainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // dao functions\\n\\n    function setBridge(uint16 _chainId, bytes calldata _bridgeAddress) external onlyOwner {\\n        require(bridgeLookup[_chainId].length == 0, \\\"Stargate: Bridge already set!\\\");\\n        bridgeLookup[_chainId] = _bridgeAddress;\\n    }\\n\\n    function setGasAmount(\\n        uint16 _chainId,\\n        uint8 _functionType,\\n        uint256 _gasAmount\\n    ) external onlyOwner {\\n        require(_functionType >= 1 && _functionType <= 4, \\\"Stargate: invalid _functionType\\\");\\n        gasLookup[_chainId][_functionType] = _gasAmount;\\n    }\\n\\n    function approveTokenSpender(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).approve(spender, amount);\\n    }\\n\\n    function setUseLayerZeroToken(bool enable) external onlyOwner {\\n        useLayerZeroToken = enable;\\n    }\\n\\n    function setOracle(uint16 _chainId, address payable _oracle) external override onlyOwner {\\n        layerZeroEndpoint.setOracle(_chainId, _oracle);\\n    }\\n\\n    function setRelayer(uint16 _chainId, address payable _relayer) external override onlyOwner {\\n        layerZeroEndpoint.setRelayer(_chainId, _relayer);\\n    }\\n\\n    function setBlockConfirmations(uint16 _chainId, uint256 _blockConfirmations) external override onlyOwner {\\n        layerZeroEndpoint.setBlockConfirmations(_chainId, _blockConfirmations);\\n    }\\n\\n    function setLibraryVersion(uint16 _chainId, uint16 _libraryVersion) external override onlyOwner {\\n        layerZeroEndpoint.setLibraryVersion(_chainId, _libraryVersion);\\n    }\\n\\n    function getOracle(\\n        uint16 _chainId,\\n        address /*unused*/\\n    ) external view override returns (address oracle) {\\n        // instead of using the address \\\"unused\\\" , actually want the oracle *this* contract has configured.\\n        return layerZeroEndpoint.getOracle(_chainId, address(this));\\n    }\\n\\n    function getRelayer(\\n        uint16 _chainId,\\n        address /*unused*/\\n    ) external view override returns (address relayer) {\\n        // instead of using the address \\\"unused\\\" , actually want the relayer *this* contract has configured.\\n        return layerZeroEndpoint.getRelayer(_chainId, address(this));\\n    }\\n\\n    function getBlockConfirmations(\\n        uint16 _chainId,\\n        address /*unused*/\\n    ) external view override returns (uint256 blockConfirmations) {\\n        // instead of using the address \\\"unused\\\" , actually want the block configurations  *this* contract has configured.\\n        return layerZeroEndpoint.getBlockConfirmations(_chainId, address(this));\\n    }\\n\\n    function getLibraryVersion(\\n        uint16 _chainId,\\n        address /*unused*/\\n    ) external view override returns (uint16 libraryVersion) {\\n        // instead of using the address \\\"unused\\\" , actually want the libraryVersion *this* contract has configured.\\n        return layerZeroEndpoint.getLibraryVersion(_chainId, address(this));\\n    }\\n\\n    function setVersion(uint16 _layerZeroVersion) external override onlyOwner {\\n        layerZeroEndpoint.setVersion(_layerZeroVersion);\\n    }\\n\\n    function getVersion() external override returns (uint16) {\\n        return layerZeroEndpoint.getVersion();\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL functions\\n\\n    function txParamBuilderType1(uint256 _gasAmount) internal pure returns (bytes memory) {\\n        uint16 txType = 1;\\n        return abi.encodePacked(txType, _gasAmount);\\n    }\\n\\n    function txParamBuilderType2(\\n        uint256 _gasAmount,\\n        uint256 _dstNativeAmount,\\n        bytes memory _dstNativeAddr\\n    ) internal pure returns (bytes memory) {\\n        uint16 txType = 2;\\n        return abi.encodePacked(txType, _gasAmount, _dstNativeAmount, _dstNativeAddr);\\n    }\\n\\n    function _txParamBuilder(\\n        uint16 _chainId,\\n        uint8 _type,\\n        Router.lzTxObj memory _lzTxParams\\n    ) internal view returns (bytes memory) {\\n        bytes memory lzTxParam;\\n        address dstNativeAddr;\\n        {\\n            bytes memory dstNativeAddrBytes = _lzTxParams.dstNativeAddr;\\n            assembly {\\n                dstNativeAddr := mload(add(dstNativeAddrBytes, 20))\\n            }\\n        }\\n\\n        uint256 totalGas = gasLookup[_chainId][_type].add(_lzTxParams.dstGasForCall);\\n        if (_lzTxParams.dstNativeAmount > 0 && dstNativeAddr != address(0x0)) {\\n            lzTxParam = txParamBuilderType2(totalGas, _lzTxParams.dstNativeAmount, _lzTxParams.dstNativeAddr);\\n        } else {\\n            lzTxParam = txParamBuilderType1(totalGas);\\n        }\\n\\n        return lzTxParam;\\n    }\\n\\n    function _call(\\n        uint16 _chainId,\\n        uint8 _type,\\n        address payable _refundAddress,\\n        Router.lzTxObj memory _lzTxParams,\\n        bytes memory _payload\\n    ) internal {\\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _type, _lzTxParams);\\n        layerZeroEndpoint.send{value: msg.value}(_chainId, bridgeLookup[_chainId], _payload, _refundAddress, address(this), lzTxParamBuilt);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xe66ad62440207708b3940556537d16482a216d993594e149460f8b43f7f7299b\",\"license\":\"BUSL-1.1\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Factory is Ownable {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    mapping(uint256 => Pool) public getPool; // poolId -> PoolInfo\\n    address[] public allPools;\\n    address public router;\\n    address public defaultFeeLibrary; // address for retrieving fee params for swaps\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: caller must be Router.\\\");\\n        _;\\n    }\\n\\n    constructor() {}\\n\\n    function setRouter(address _router) external onlyOwner {\\n        require(router == address(0x0), \\\"router already intialized\\\"); // 1 time only\\n        router = _router;\\n    }\\n\\n    function setDefaultFeeLibrary(address _defaultFeeLibrary) external onlyOwner {\\n        defaultFeeLibrary = _defaultFeeLibrary;\\n    }\\n\\n    function allPoolsLength() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    function createPool(\\n        uint256 _poolId,\\n        address _token,\\n        uint8 _sharedDecimals,\\n        uint8 _localDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) public onlyRouter returns (address poolAddress) {\\n        require(address(getPool[_poolId]) == address(0x0), \\\"Stargate: Pool already created\\\");\\n\\n        Pool pool = new Pool(_poolId, router, _token, _sharedDecimals, _localDecimals, defaultFeeLibrary, _name, _symbol);\\n        getPool[_poolId] = pool;\\n        poolAddress = address(pool);\\n        allPools.push(poolAddress);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x682f24b8f4581e67c86d50db3ed4fd298f60c2fed9877ff616e98ec7468da2ac\",\"license\":\"BUSL-1.1\"},\"contracts/LPTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LPTokenERC20 {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    string public name;\\n    string public symbol;\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // set in constructor\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    uint256 public decimals;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    //\\n    //\\n    //\\n    //\\n    //    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    //        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n    //        return true;\\n    //    }\\n    //\\n    //\\n    //\\n    //\\n    //    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n    //        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n    //        return true;\\n    //    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Bridge: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Bridge: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x9a08995ccddfce7f0ba1a08aba80141d3754b0a609a908112dc309739e1f3c1b\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./LPTokenERC20.sol\\\";\\nimport \\\"./interfaces/IStargateFeeLibrary.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// Pool contracts on other chains and managed by the Stargate protocol.\\ncontract Pool is LPTokenERC20, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct ChainPath {\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        uint256 weight;\\n        uint256 balance;\\n        uint256 lkb;\\n        uint256 credits;\\n        uint256 idealBalance;\\n        bool ready; // indicate if the counter chainPath has been created.\\n    }\\n\\n    struct SwapObj {\\n        uint256 amount;\\n        uint256 eqFee;\\n        uint256 eqReward;\\n        uint256 lpFee;\\n        uint256 protocolFee;\\n        uint256 lkbRemove;\\n    }\\n\\n    struct CreditObj {\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // chainPath\\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\\n    mapping(uint16 => mapping(uint256 => uint256)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\\n\\n    // metadata\\n    uint256 public poolId; // shared id between chains to represent same pool\\n    uint256 public sharedDecimals; // the shared decimals (lowest common decimals between chains)\\n    uint256 public localDecimals; // the decimals for the token\\n    uint256 public convertRate; // the decimals for the token\\n    bool public stopSwap; // flag to stop swapping in extreme cases\\n    address public token; // the token for the pool\\n    address public router; // the token for the pool\\n\\n    // Fee and Liquidity\\n    uint256 public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\\n    uint256 public totalWeight; // total weight for pool percentages\\n    uint256 public mintFeeBP; // fee basis points for the mint/deposit\\n    uint256 public protocolFeeBalance; // fee balance created from dao fee\\n    uint256 public mintFeeBalance; // fee balance created from mint fee\\n    uint256 public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\\n    address public feeLibrary; // address for retrieving fee params for swaps\\n\\n    // Delta related\\n    uint256 public deltaCredit; // credits accumulated from txn\\n    bool public batched; // flag to indicate if we want batch processing.\\n    bool public defaultSwapMode; // flag for the default mode for swap\\n    bool public defaultLPMode; // flag for the default mode for lp\\n    uint256 public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\\n    uint256 public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Mint(address to, uint256 amountLP, uint256 amountSD, uint256 mintFeeAmountSD);\\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocalCallback(address _to, uint256 _amountSD, uint256 _amountToMintSD);\\n    event Swap(\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        address from,\\n        uint256 amountSD,\\n        uint256 eqReward,\\n        uint256 eqFee,\\n        uint256 protocolFee,\\n        uint256 lpFee\\n    );\\n    event SendCredits(uint16 dstChainId, uint256 dstPoolId, uint256 credits, uint256 idealBalance);\\n    event RedeemRemote(uint16 chainId, uint256 dstPoolId, address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, address to);\\n    event InstantRedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, address to);\\n    event CreditChainPath(uint16 chainId, uint256 srcPoolId, uint256 amountSD, uint256 idealBalance);\\n    event SwapRemote(address to, uint256 amountSD, uint256 protocolFee, uint256 dstFee);\\n    event WithdrawRemote(uint16 srcChainId, uint256 srcPoolId, uint256 swapAmount, uint256 mintAmount);\\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\\n    event FeesUpdated(uint256 mintFeeBP);\\n    event FeeLibraryUpdated(address feeLibraryAddr);\\n    event StopSwapUpdated(bool swapStop);\\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\\n    event DeltaParamUpdated(bool batched, uint256 swapDeltaBP, uint256 lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: only the router can call this method\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _poolId,\\n        address _router,\\n        address _token,\\n        uint256 _sharedDecimals,\\n        uint256 _localDecimals,\\n        address _feeLibrary,\\n        string memory _name,\\n        string memory _symbol\\n    ) LPTokenERC20(_name, _symbol) {\\n        require(_token != address(0x0), \\\"Stargate: _token cannot be 0x0\\\");\\n        require(_router != address(0x0), \\\"Stargate: _router cannot be 0x0\\\");\\n        poolId = _poolId;\\n        router = _router;\\n        token = _token;\\n        sharedDecimals = _sharedDecimals;\\n        decimals = uint8(_sharedDecimals);\\n        localDecimals = _localDecimals;\\n        convertRate = 10**(uint256(localDecimals).sub(sharedDecimals));\\n        totalWeight = 0;\\n        feeLibrary = _feeLibrary;\\n\\n        //delta algo related\\n        batched = false;\\n        defaultSwapMode = true;\\n        defaultLPMode = true;\\n    }\\n\\n    //---------------\\n    // EXTERNAL\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n    // Local                                    Remote\\n    // -------                                  ---------\\n\\n    function mint(address _to, uint256 _amountLD) external nonReentrant onlyRouter returns (uint256) {\\n        return _mintLocal(_to, _amountLD, true, true);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    //\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        bool newLiquidity\\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\\n        require(!stopSwap, \\\"Stargate: swap func stopped\\\");\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n\\n        uint256 amountSD = amountLDtoSD(_amountLD);\\n        uint256 minAmountSD = amountLDtoSD(_minAmountLD);\\n\\n        // request fee params from library\\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\\n\\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\\n        eqFeePool = eqFeePool.sub(s.eqReward);\\n        // users will also get the eqReward\\n        require(s.amount.add(s.eqReward) >= minAmountSD, \\\"Stargate: slippage too high\\\");\\n\\n        // s.lkbRemove = amountSD.add(s.eqReward).sub(s.lpFee);\\n        s.lkbRemove = amountSD.sub(s.lpFee);\\n        // check for transfer solvency\\n        require(cp.balance >= s.lkbRemove, \\\"Stargate: dst balance too low\\\");\\n        cp.balance = cp.balance.sub(s.lkbRemove);\\n\\n        // distribute credits on condition.\\n        if (newLiquidity) {\\n            deltaCredit = deltaCredit.add(amountSD);\\n        }\\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(10000)) {\\n            _delta(defaultSwapMode);\\n        }\\n\\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\\n        return s;\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n\\n    function sendCredits(uint16 _dstChainId, uint256 _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        cp.lkb = cp.lkb.add(cp.credits);\\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\\n        c.credits = cp.credits;\\n        cp.credits = 0;\\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemRemote   ->                        swapRemote\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLP\\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 amountSD = _burnLocal(_from, _amountLP);\\n        //run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(10000)) {\\n            _delta(defaultLPMode);\\n        }\\n        amountLD = amountSDtoLD(amountSD);\\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountSD);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n\\n    function redeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        // safeguard.\\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        amountSD = _burnLocal(_from, _amountLP);\\n\\n        // run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(10000)) {\\n            _delta(false);\\n        }\\n\\n        // if the amountSD <= unallocated credit, a direct withdrawal would suffice\\n        if (amountSD <= deltaCredit) {\\n            deltaCredit = deltaCredit.sub(amountSD);\\n            uint256 amountLD = amountSDtoLD(amountSD);\\n            _safeTransfer(token, _to, amountLD);\\n            emit InstantRedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\\n            // no need to get acknowledgement from remote\\n            amountSD = 0;\\n        } else {\\n            emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // REMOTE CHAIN FUNCTIONS\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n\\n    function creditChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        CreditObj memory _c\\n    ) external nonReentrant onlyRouter {\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        cp.balance = cp.balance.add(_c.credits);\\n        if (cp.idealBalance != _c.idealBalance) {\\n            cp.idealBalance = _c.idealBalance;\\n        }\\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n\\n    function swapRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        SwapObj memory _s\\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\\n        // booking lpFee\\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\\n        // booking eqFee\\n        eqFeePool = eqFeePool.add(_s.eqFee);\\n        // booking stargateFee\\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\\n\\n        // update LKB\\n        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\\n\\n        // user receives the amount + the srcReward\\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\\n        _safeTransfer(token, _to, amountLD);\\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n\\n    function redeemLocalCallback(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _amountToMintSD\\n    ) external nonReentrant onlyRouter {\\n        if (_amountToMintSD > 0) {\\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\\n        }\\n\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        cp.lkb = cp.lkb.sub(_amountSD);\\n\\n        uint256 amountLD = amountSDtoLD(_amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal(amount)   ->               withdrawRemote\\n    // redeemLocalCallback             <-\\n\\n    function redeemLocalCheckOnRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _amountSD\\n    ) external nonReentrant onlyRouter returns (uint256 swapAmount, uint256 mintAmount) {\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        if (_amountSD > cp.balance) {\\n            mintAmount = _amountSD - cp.balance;\\n            swapAmount = cp.balance;\\n            cp.balance = 0;\\n        } else {\\n            cp.balance = cp.balance.sub(_amountSD);\\n            swapAmount = _amountSD;\\n            mintAmount = 0;\\n        }\\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // DAO Calls\\n\\n    function createChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _weight\\n    ) external onlyRouter {\\n        for (uint256 i = 0; i < chainPaths.length; ++i) {\\n            ChainPath memory cp = chainPaths[i];\\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\\n            require(!exists, \\\"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\\\");\\n        }\\n        totalWeight = totalWeight.add(_weight);\\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\\n        chainPaths.push(ChainPath(_dstChainId, _dstPoolId, _weight, 0, 0, 0, 0, false));\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setWeightForChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint16 _weight\\n    ) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\\n        cp.weight = _weight;\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setFee(uint256 _mintFeeBP) external onlyRouter {\\n        require(_mintFeeBP <= 10000, \\\"Bridge: cum fees > 100%\\\");\\n        mintFeeBP = _mintFeeBP;\\n        emit FeesUpdated(mintFeeBP);\\n    }\\n\\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\\n        feeLibrary = _feeLibraryAddr;\\n        emit FeeLibraryUpdated(_feeLibraryAddr);\\n    }\\n\\n    function setSwapStop(bool _swapStop) external onlyRouter {\\n        stopSwap = _swapStop;\\n        emit StopSwapUpdated(_swapStop);\\n    }\\n\\n    function setDeltaParam(\\n        bool _batched,\\n        uint256 _swapDeltaBP,\\n        uint256 _lpDeltaBP,\\n        bool _defaultSwapMode,\\n        bool _defaultLPMode\\n    ) external onlyRouter {\\n        require(_swapDeltaBP <= 10000 && _lpDeltaBP <= 10000, \\\"Stargate: wrong Delta param\\\");\\n        batched = _batched;\\n        swapDeltaBP = _swapDeltaBP;\\n        lpDeltaBP = _lpDeltaBP;\\n        defaultSwapMode = _defaultSwapMode;\\n        defaultLPMode = _defaultLPMode;\\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\\n    }\\n\\n    function callDelta(bool _fullMode) external onlyRouter {\\n        _delta(_fullMode);\\n    }\\n\\n    function activateChainPath(uint16 _dstChainId, uint256 _dstPoolId) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == false, \\\"Stargate: chainPath is already active\\\");\\n        // this func will only be called once\\n        cp.ready = true;\\n    }\\n\\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\\n        if (protocolFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(protocolFeeBalance);\\n            protocolFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\\n        if (mintFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(mintFeeBalance);\\n            mintFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL\\n    // Conversion Helpers\\n    //---------------------------------------------------------------------------\\n\\n    function amountSDtoLD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(convertRate);\\n    }\\n\\n    function amountLDtoSD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.div(convertRate);\\n    }\\n\\n    function getAndCheckCP(uint16 _dstChainId, uint256 _dstPoolId) internal view returns (ChainPath storage) {\\n        require(chainPaths.length > 0, \\\"Stargate: no chainpaths exist\\\");\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function _burnLocal(address _from, uint256 _amountLP) internal returns (uint256) {\\n        uint256 amountOfLPTokens = balanceOf[_from];\\n        require(amountOfLPTokens >= _amountLP, \\\"Stargate: not enough LP tokens to burn\\\");\\n\\n        uint256 amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\\n        //subtract totalLiquidity accordingly\\n        totalLiquidity = totalLiquidity.sub(amountSD);\\n\\n        _burn(_from, _amountLP);\\n        emit Burn(_from, _amountLP, amountSD);\\n        return amountSD;\\n    }\\n\\n    function _delta(bool fullMode) internal {\\n        if (deltaCredit > 0 && totalWeight > 0) {\\n            uint256 cpLength = chainPaths.length;\\n            uint256[] memory deficit = new uint256[](cpLength);\\n            uint256 totalDeficit = 0;\\n\\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\\n            for (uint256 i = 0; i < cpLength; ++i) {\\n                ChainPath storage cp = chainPaths[i];\\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\\n                uint256 balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\\n                uint256 currLiq = cp.lkb.add(cp.credits);\\n                if (balLiq > currLiq) {\\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\\n                    deficit[i] = balLiq - currLiq;\\n                    totalDeficit = totalDeficit.add(deficit[i]);\\n                }\\n            }\\n\\n            // indicates how much delta credit is distributed\\n            uint256 spent;\\n\\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\\n            // run full Delta, allocate all credits\\n            if (totalDeficit == 0) {\\n                // only fullMode delta will allocate excess credits\\n                if (fullMode && deltaCredit > 0) {\\n                    // credit ChainPath by weights\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\\n                        uint256 amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\\n                        spent = spent.add(amtToCredit);\\n                        cp.credits = cp.credits.add(amtToCredit);\\n                    }\\n                } // else do nth\\n            } else if (totalDeficit <= deltaCredit) {\\n                if (fullMode) {\\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\\n                    uint256 excessCredit = deltaCredit - totalDeficit;\\n                    // algorithm steps 14-16: calculate credits\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            // credits = credits + deficit + remaining allocation based on weight\\n                            uint256 amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                } else {\\n                    // totalDeficit <= deltaCredit but not running fullMode\\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            uint256 amtToCredit = deficit[i];\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\\n                for (uint256 i = 0; i < cpLength; ++i) {\\n                    if (deficit[i] > 0) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        uint256 proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\\n                        spent = spent.add(proportionalDeficit);\\n                        cp.credits = cp.credits.add(proportionalDeficit);\\n                    }\\n                }\\n            }\\n\\n            // deduct the amount of credit sent\\n            deltaCredit = deltaCredit.sub(spent);\\n        }\\n    }\\n\\n    function _mintLocal(\\n        address _to,\\n        uint256 _amountLD,\\n        bool _feesEnabled,\\n        bool _creditDelta\\n    ) internal returns (uint256 amountSD) {\\n        require(totalWeight > 0, \\\"Stargate: No ChainPaths exist\\\");\\n        amountSD = amountLDtoSD(_amountLD);\\n\\n        uint256 mintFeeSD = 0;\\n        if (_feesEnabled) {\\n            mintFeeSD = amountSD.mul(mintFeeBP).div(10000);\\n            amountSD = amountSD.sub(mintFeeSD);\\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\\n        }\\n\\n        if (_creditDelta) {\\n            deltaCredit = deltaCredit.add(amountSD);\\n        }\\n\\n        uint256 amountLPTokens = amountSD;\\n        if (totalSupply != 0) {\\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\\n        }\\n        totalLiquidity = totalLiquidity.add(amountSD);\\n\\n        _mint(_to, amountLPTokens);\\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\\n\\n        // add to credits and call delta. short circuit to save gas\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(10000)) {\\n            _delta(defaultLPMode);\\n        }\\n    }\\n\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) private {\\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Stargate: TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2ac96db1979c660fa66dd6edbd4a66ddb926f806a034795bb286ef6935640377\",\"license\":\"BUSL-1.1\"},\"contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./Factory.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./Bridge.sol\\\";\\n\\n// interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IStargateRouter.sol\\\";\\nimport \\\"./interfaces/IStargateReceiver.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract Router is IStargateRouter, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    uint8 public constant TYPE_REDEEM_LOCAL_RESPONSE = 1;\\n    uint8 public constant TYPE_REDEEM_LOCAL_CALLBACK_RETRY = 2;\\n    uint8 public constant TYPE_SWAP_REMOTE_RETRY = 3;\\n\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct CachedSwap {\\n        address token;\\n        uint256 amountLD;\\n        address to;\\n        bytes payload;\\n    }\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    Factory public factory; // used for creating pools\\n    address public protocolFeeOwner; // can call methods to pull Stargate fees collected in pools\\n    address public mintFeeOwner; // can call methods to pull mint fees collected in pools\\n    Bridge public bridge;\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => bytes))) public revertLookup; //[chainId][srcAddress][nonce]\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => CachedSwap))) public cachedSwapLookup; //[chainId][srcAddress][nonce]\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Revert(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce);\\n    event ReceiveFailed(uint16 chainId, bytes srcAddress, uint256 nonce, address token, uint256 amountLD, bytes payload, string reason);\\n    event CachedSwapSaved(uint16 chainId, bytes srcAddress, uint256 nonce, address token, uint256 amountLD, address to, bytes payload);\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyBridge() {\\n        require(msg.sender == address(bridge), \\\"Bridge: caller must be Bridge.\\\");\\n        _;\\n    }\\n\\n    constructor() {}\\n\\n    function setBridgeAndFactory(Bridge _bridge, Factory _factory) external onlyOwner {\\n        require(address(bridge) == address(0x0), \\\"bridge already initialized\\\"); // 1 time only\\n        require(address(factory) == address(0x0), \\\"factory already initialized\\\"); // 1 time only\\n\\n        bridge = _bridge;\\n        factory = _factory;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VIEWS\\n\\n    function _getPool(uint256 _poolId) internal view returns (Pool pool) {\\n        pool = factory.getPool(_poolId);\\n        require(address(pool) != address(0x0), \\\"Stargate: Pool does not exist\\\");\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Stargate: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external override {\\n        Pool pool = _getPool(_poolId);\\n        _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\\n        pool.mint(_to, _amountLD);\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable override {\\n        Pool.SwapObj memory s;\\n        Pool.CreditObj memory c;\\n        {\\n            Pool pool = _getPool(_srcPoolId);\\n            _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, _amountLD, _minAmountLD, true);\\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\\n        }\\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, _payload);\\n    }\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable override {\\n        Pool.SwapObj memory s;\\n        Pool.CreditObj memory c;\\n\\n        {\\n            Pool pool = _getPool(_srcPoolId);\\n            uint256 amountLD = pool.redeemRemote(_dstChainId, _dstPoolId, msg.sender, _amountLP);\\n            // perform a swap with no liquidity\\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, amountLD, _minAmountLD, false);\\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\\n        }\\n        // equal to a swap, with no payload (\\\"0x\\\") no dstGasForCall 0\\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, \\\"\\\");\\n    }\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable override {\\n        Pool pool = _getPool(_srcPoolId);\\n\\n        address toAddress;\\n        {\\n            bytes memory to_mem = _to;\\n            assembly {\\n                toAddress := mload(add(to_mem, 20))\\n            }\\n        }\\n\\n        uint256 amountSD = pool.redeemLocal(msg.sender, _amountLP, _dstChainId, _dstPoolId, toAddress);\\n        Pool.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\\n        if (amountSD == 0) {\\n            // full instant withdrawal at local, just send credit\\n            bridge.sendCredits{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c);\\n        } else {\\n            bridge.redeemLocal{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, amountSD, _to, _lzTxParams);\\n        }\\n    }\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable override {\\n        require(_refundAddress != address(0x0), \\\"Stargate: _refundAddress cannot be 0x0\\\");\\n        Pool pool = _getPool(_srcPoolId);\\n        Pool.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\\n        bridge.sendCredits{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c);\\n    }\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        Router.lzTxObj memory _lzTxParams\\n    ) external view override returns (uint256) {\\n        return bridge.quoteLayerZeroFee(_dstChainId, _functionType, _toAddress, _transferAndCallPayload, _lzTxParams);\\n    }\\n\\n    function revertRedeemLocal(\\n        uint16 _dstChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce,\\n        address payable _refundAddress,\\n        lzTxObj memory _lzTxParams\\n    ) external payable {\\n        bytes memory payload = revertLookup[_dstChainId][_srcAddress][_nonce];\\n        require(payload.length > 0, \\\"Stargate: no retry revert\\\");\\n        {\\n            uint8 functionType;\\n            assembly {\\n                functionType := mload(add(payload, 32))\\n            }\\n            require(functionType == TYPE_REDEEM_LOCAL_RESPONSE, \\\"Stargate: invalid function type\\\");\\n        }\\n\\n        // empty it\\n        revertLookup[_dstChainId][_srcAddress][_nonce] = \\\"\\\";\\n\\n        uint256 srcPoolId;\\n        uint256 dstPoolId;\\n        assembly {\\n            srcPoolId := mload(add(payload, 64))\\n            dstPoolId := mload(add(payload, 96))\\n        }\\n\\n        Pool.CreditObj memory c;\\n        {\\n            Pool pool = _getPool(dstPoolId);\\n            c = pool.sendCredits(_dstChainId, srcPoolId);\\n        }\\n\\n        bridge.redeemLocalCallback{value: msg.value}(_dstChainId, _refundAddress, c, _lzTxParams, payload);\\n    }\\n\\n    function retryRevert(\\n        uint16 _dstChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external payable {\\n        bytes memory payload = revertLookup[_dstChainId][_srcAddress][_nonce];\\n        require(payload.length > 0, \\\"Stargate: no retry revert\\\");\\n\\n        // empty it\\n        revertLookup[_dstChainId][_srcAddress][_nonce] = \\\"\\\";\\n\\n        uint8 functionType;\\n        assembly {\\n            functionType := mload(add(payload, 32))\\n        }\\n\\n        if (functionType == TYPE_REDEEM_LOCAL_CALLBACK_RETRY) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, address to, uint256 amountSD, uint256 mintAmountSD) = abi.decode(\\n                payload,\\n                (uint8, uint256, uint256, address, uint256, uint256)\\n            );\\n            _redeemLocalCallback(_dstChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, to, amountSD, mintAmountSD);\\n        }\\n        // for retrying the swapRemote. if it fails again, retry\\n        else if (functionType == TYPE_SWAP_REMOTE_RETRY) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, uint256 dstGasForCall, address to, Pool.SwapObj memory s, bytes memory p) = abi.decode(\\n                payload,\\n                (uint8, uint256, uint256, uint256, address, Pool.SwapObj, bytes)\\n            );\\n            _swapRemote(_dstChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, to, s, p);\\n        }\\n    }\\n\\n    function clearCachedSwap(\\n        uint16 _dstChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external {\\n        CachedSwap memory cs = cachedSwapLookup[_dstChainId][_srcAddress][_nonce];\\n        require(cs.to != address(0x0), \\\"Stargate: cache already cleared\\\");\\n        IStargateReceiver(cs.to).sgReceive(_dstChainId, _srcAddress, _nonce, cs.token, cs.amountLD, cs.payload);\\n\\n        // clear the data\\n        cachedSwapLookup[_dstChainId][_srcAddress][_nonce] = CachedSwap(address(0x0), 0, address(0x0), \\\"\\\");\\n    }\\n\\n    function creditChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _srcPoolId,\\n        Pool.CreditObj memory _c\\n    ) external onlyBridge {\\n        Pool pool = _getPool(_srcPoolId);\\n        pool.creditChainPath(_dstChainId, _dstPoolId, _c);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // REMOTE CHAIN FUNCTIONS\\n\\n    function redeemLocalCheckOnRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint256 _amountSD,\\n        bytes calldata _to\\n    ) external onlyBridge {\\n        Pool pool = _getPool(_dstPoolId);\\n        try pool.redeemLocalCheckOnRemote(_srcChainId, _srcPoolId, _amountSD) returns (uint256 swapAmountSD, uint256 mintAmountSD) {\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\\n                TYPE_REDEEM_LOCAL_RESPONSE,\\n                _srcPoolId,\\n                _dstPoolId,\\n                swapAmountSD,\\n                mintAmountSD,\\n                _to\\n            );\\n            emit Revert(TYPE_REDEEM_LOCAL_RESPONSE, _srcChainId, _srcAddress, _nonce);\\n        } catch {\\n            // if the func fail, return [swapAmount: 0, mintAMount: _amountSD]\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REDEEM_LOCAL_RESPONSE, _srcPoolId, _dstPoolId, 0, _amountSD, _to);\\n            emit Revert(TYPE_REDEEM_LOCAL_RESPONSE, _srcChainId, _srcAddress, _nonce);\\n        }\\n    }\\n\\n    function redeemLocalCallback(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _mintAmountSD\\n    ) external onlyBridge {\\n        _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\\n    }\\n\\n    function _redeemLocalCallback(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _mintAmountSD\\n    ) internal {\\n        Pool pool = _getPool(_dstPoolId);\\n        try pool.redeemLocalCallback(_srcChainId, _srcPoolId, _to, _amountSD, _mintAmountSD) {} catch {\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\\n                TYPE_REDEEM_LOCAL_CALLBACK_RETRY,\\n                _srcPoolId,\\n                _dstPoolId,\\n                _to,\\n                _amountSD,\\n                _mintAmountSD\\n            );\\n            emit Revert(TYPE_REDEEM_LOCAL_CALLBACK_RETRY, _srcChainId, _srcAddress, _nonce);\\n        }\\n    }\\n\\n    function swapRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint256 _dstGasForCall,\\n        address _to,\\n        Pool.SwapObj memory _s,\\n        bytes memory _payload\\n    ) external onlyBridge {\\n        _swapRemote(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _dstGasForCall, _to, _s, _payload);\\n    }\\n\\n    function _swapRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint256 _dstGasForCall,\\n        address _to,\\n        Pool.SwapObj memory _s,\\n        bytes memory _payload\\n    ) internal {\\n        Pool pool = _getPool(_dstPoolId);\\n        try pool.swapRemote(_srcChainId, _srcPoolId, _to, _s) returns (uint256 amountLD) {\\n            if (_payload.length > 0) {\\n                try\\n                    IStargateReceiver(_to).sgReceive{gas: _dstGasForCall}(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _payload)\\n                {} catch Error(string memory reason) {\\n                    // string memory reason is useful to put in the event to see why it failed\\n                    emit ReceiveFailed(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _payload, reason);\\n                } catch (\\n                    bytes memory /*returnData*/ // The call likely ran out of gas\\n                ) {\\n                    cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(pool.token(), amountLD, _to, _payload);\\n                    emit CachedSwapSaved(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _to, _payload);\\n                }\\n            }\\n        } catch {\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\\n                TYPE_SWAP_REMOTE_RETRY,\\n                _srcPoolId,\\n                _dstPoolId,\\n                _dstGasForCall,\\n                _to,\\n                _s,\\n                _payload\\n            );\\n            emit Revert(TYPE_SWAP_REMOTE_RETRY, _srcChainId, _srcAddress, _nonce);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // DAO Calls\\n\\n    function createPool(\\n        uint256 _poolId,\\n        address _token,\\n        uint8 _sharedDecimals,\\n        uint8 _localDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) external onlyOwner returns (address) {\\n        require(_token != address(0x0), \\\"Stargate: _token cannot be 0x0\\\");\\n        return factory.createPool(_poolId, _token, _sharedDecimals, _localDecimals, _name, _symbol);\\n    }\\n\\n    function createChainPath(\\n        uint256 _poolId,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _weight\\n    ) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.createChainPath(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function activateChainPath(\\n        uint256 _poolId,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId\\n    ) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.activateChainPath(_dstChainId, _dstPoolId);\\n    }\\n\\n    function setWeightForChainPath(\\n        uint256 _poolId,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint16 _weight\\n    ) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setWeightForChainPath(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setProtocolFeeOwner(address _owner) external onlyOwner {\\n        require(_owner != address(0x0), \\\"Stargate: _owner cannot be 0x0\\\");\\n        protocolFeeOwner = _owner;\\n    }\\n\\n    function setMintFeeOwner(address _owner) external onlyOwner {\\n        require(_owner != address(0x0), \\\"Stargate: _owner cannot be 0x0\\\");\\n        mintFeeOwner = _owner;\\n    }\\n\\n    function setFees(uint256 _poolId, uint256 _mintFeeBP) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setFee(_mintFeeBP);\\n    }\\n\\n    function setFeeLibrary(uint256 _poolId, address _feeLibraryAddr) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setFeeLibrary(_feeLibraryAddr);\\n    }\\n\\n    function setSwapStop(uint256 _poolId, bool _swapStop) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setSwapStop(_swapStop);\\n    }\\n\\n    function setDeltaParam(\\n        uint256 _poolId,\\n        bool _batched,\\n        uint256 _swapDeltaBP,\\n        uint256 _lpDeltaBP,\\n        bool _defaultSwapMode,\\n        bool _defaultLPMode\\n    ) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setDeltaParam(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\\n    }\\n\\n    function callDelta(uint256 _poolId, bool _fullMode) external {\\n        Pool pool = _getPool(_poolId);\\n        pool.callDelta(_fullMode);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n\\n    function withdrawMintFee(uint256 _poolId, address _to) external {\\n        require(mintFeeOwner == msg.sender, \\\"Stargate: only mintFeeOwner\\\");\\n        Pool pool = _getPool(_poolId);\\n        pool.withdrawMintFeeBalance(_to);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n\\n    function withdrawProtocolFee(uint256 _poolId, address _to) external {\\n        require(protocolFeeOwner == msg.sender, \\\"Stargate: only protocolFeeOwner\\\");\\n        Pool pool = _getPool(_poolId);\\n        pool.withdrawProtocolFeeBalance(_to);\\n    }\\n}\\n\",\"keccak256\":\"0x70ee339d2baed1ff98a587868b55cd514cd8b4e63228856b40876b4611e0593c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    function send(\\n        uint16 _chainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata txParameters\\n    ) external payable;\\n\\n    function estimateNativeFees(\\n        uint16 chainId,\\n        address userApplication,\\n        bytes calldata payload,\\n        bool payInZRO,\\n        bytes calldata txParameters\\n    ) external view returns (uint256 totalFee);\\n\\n    function getEndpointId() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xddf0a3786cad752f5a457d2159b3dd8b2df4624bed51162b17347416e86631fc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\n\\ninterface ILayerZeroReceiver {\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbac3dd762e9b9374583d25f533b428667296823d6f773a31474f2fb81fc051ea\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    /* setters */\\n\\n    function setOracle(uint16 _chainId, address payable _oracle) external;\\n\\n    function setRelayer(uint16 _chainId, address payable _relayer) external;\\n\\n    function setBlockConfirmations(uint16 _chainId, uint256 _blockConfirmations) external;\\n\\n    function setLibraryVersion(uint16 _chainId, uint16 _libraryVersion) external;\\n\\n    function setVersion(uint16 version) external;\\n\\n    function getVersion() external returns (uint16);\\n\\n    /* getters */\\n\\n    function getOracle(uint16 _chainId, address userApplicationAddress) external view returns (address oracle);\\n\\n    function getRelayer(uint16 _chainId, address userApplicationAddress) external view returns (address relayer);\\n\\n    function getBlockConfirmations(uint16 _chainId, address userApplicationAddress) external view returns (uint256 blockConfirmations);\\n\\n    function getLibraryVersion(uint16 _chainId, address userApplicationAddress) external view returns (uint16 libraryVersion);\\n}\\n\",\"keccak256\":\"0xe17dc97ad7c287fe4fe39ab4990f7f5d984b60b227f643745d62c849fc57e21f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateFeeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\nimport \\\"../Pool.sol\\\";\\n\\ninterface IStargateFeeLibrary {\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint256 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external returns (Pool.SwapObj memory s);\\n}\\n\",\"keccak256\":\"0xe7f93133694f5047221966997010e2b09e567219d175f5c031cd32ed3d36cb8b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x426e44d3907557a4cc3938894f5c42620d553603900c855ccd7cd417b3a75e79\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../Router.sol\\\";\\n\\ninterface IStargateRouter {\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        Router.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        Router.lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        Router.lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        Router.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x62fdddaabba0265ed5c9d5672fc7524b6c97502135b94d8d883a92d72b1d8fe0\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Router.sol:Router",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2080,
        "contract": "contracts/Router.sol:Router",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7312,
        "contract": "contracts/Router.sol:Router",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Factory)3392"
      },
      {
        "astId": 7314,
        "contract": "contracts/Router.sol:Router",
        "label": "protocolFeeOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7316,
        "contract": "contracts/Router.sol:Router",
        "label": "mintFeeOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7318,
        "contract": "contracts/Router.sol:Router",
        "label": "bridge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(Bridge)3235"
      },
      {
        "astId": 7326,
        "contract": "contracts/Router.sol:Router",
        "label": "revertLookup",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes_storage)))"
      },
      {
        "astId": 7334,
        "contract": "contracts/Router.sol:Router",
        "label": "cachedSwapLookup",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(CachedSwap)7303_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(Bridge)3235": {
        "encoding": "inplace",
        "label": "contract Bridge",
        "numberOfBytes": "20"
      },
      "t_contract(Factory)3392": {
        "encoding": "inplace",
        "label": "contract Factory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(CachedSwap)7303_storage))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => struct Router.CachedSwap))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(CachedSwap)7303_storage)"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes_storage)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint256 => bytes)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes_storage))"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(CachedSwap)7303_storage)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint256 => struct Router.CachedSwap)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(CachedSwap)7303_storage))"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_struct(CachedSwap)7303_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Router.CachedSwap)",
        "numberOfBytes": "32",
        "value": "t_struct(CachedSwap)7303_storage"
      },
      "t_struct(CachedSwap)7303_storage": {
        "encoding": "inplace",
        "label": "struct Router.CachedSwap",
        "members": [
          {
            "astId": 7296,
            "contract": "contracts/Router.sol:Router",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7298,
            "contract": "contracts/Router.sol:Router",
            "label": "amountLD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7300,
            "contract": "contracts/Router.sol:Router",
            "label": "to",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7302,
            "contract": "contracts/Router.sol:Router",
            "label": "payload",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
